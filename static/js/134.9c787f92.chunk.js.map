{"version":3,"file":"static/js/134.9c787f92.chunk.js","mappings":"kLAkCA,IA5BoB,SAAC,GAA0B,IAAxBA,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,SACvBC,GAAeC,EAAAA,EAAAA,MACfC,EAAKH,EAASI,SAEpB,OACE,+BACE,eAAIC,UAAU,sBAAd,SACGN,EAAOO,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,MAApB,OACV,SAAC,KAAD,CAEEN,GAAIA,IAAOO,EAAAA,EAAAA,KAAP,UAAwBH,GAAxB,UAAkCG,EAAAA,EAAAA,OAAlC,YAAmDH,GACvDI,MAAO,CAAEC,KAAMX,GACfI,UAAU,2EAJZ,UAME,2BACE,gBACEQ,IAAKL,EApBJ,kCAoB6BA,EAlB5C,0IAmBcM,IAAKL,EACLM,MAAM,SAER,cAAGV,UAAU,sBAAb,SAAoCI,QAXjCF,EAFG,OAoBnB,C,wJCkCD,UA5De,WAAO,IAAD,EACnB,GAA4BS,EAAAA,EAAAA,YAA5B,eAAOjB,EAAP,KAAekB,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAQF,EAAaG,IAAb,UAAiB,SAAjB,EAA4B,IACpCtB,GAAWE,EAAAA,EAAAA,OAEjBqB,EAAAA,EAAAA,YAAU,WACHF,IAEL,iBAAC,gHAE6BG,EAAAA,EAAAA,IAAiBH,GAF9C,oBAEWI,EAFX,EAEWA,SACKC,OAHhB,uBAIKC,EAAAA,GAAAA,MAAY,yCAJjB,0BAOGV,EAAUQ,GAPb,kDASGE,EAAAA,GAAAA,MAAA,UACK,KAAMC,QADX,8CATH,yDAAD,EAcD,GAAE,CAACP,IAeJ,OACE,iCACE,kBAAMQ,SAfW,SAAAC,GAEnB,GADAA,EAAEC,iBACmC,KAAjCD,EAAEE,OAAOC,SAASC,KAAKC,MAA3B,CAIA,IAAMC,EAAKN,EAAEO,cACbjB,EAAgB,CACdC,MAAOe,EAAGH,SAASC,KAAKC,MAAMG,SAEhCF,EAAGG,OALF,MAFCZ,EAAAA,GAAAA,MAAY,4BAQf,EAIiCtB,UAAU,sBAAxC,WACE,kBACEmC,KAAK,OACLC,YAAY,iBACZC,aAAa,MACbC,KAAK,OACLtC,UAAU,0EAEZ,mBACEmC,KAAK,SACLnC,UAAU,gHAFZ,UAIE,SAAC,MAAD,SAGHN,IAAU,SAAC,IAAD,CAAaA,OAAQA,EAAQC,SAAUA,MAGvD,C,mMC/DD4C,EAAAA,EAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAAS,oCAGJ,IAAMC,EAAkB,mCAAG,sGACTF,EAAAA,EAAAA,IAAU,uBADD,uBACxBG,EADwB,EACxBA,KADwB,kBAEzBA,GAFyB,2CAAH,qDAKlBvB,EAAgB,mCAAG,WAAMH,GAAN,yFACPuB,EAAAA,EAAAA,IAAA,+BAAkCvB,IAD3B,uBACtB0B,EADsB,EACtBA,KADsB,kBAEvBA,GAFuB,2CAAH,sDAKhBC,EAAiB,mCAAG,WAAMC,GAAN,yFACRL,EAAAA,EAAAA,IAAA,iBAAoBK,EAApB,MADQ,uBACvBF,EADuB,EACvBA,KADuB,kBAExBA,GAFwB,2CAAH,sDAKjBG,EAAc,mCAAG,WAAMD,GAAN,yFACLL,EAAAA,EAAAA,IAAA,iBAAoBK,EAApB,cADK,uBACpBF,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,sDAKdI,EAAiB,mCAAG,WAAMF,GAAN,yFACRL,EAAAA,EAAAA,IAAA,iBAAoBK,EAApB,cADQ,uBACvBF,EADuB,EACvBA,KADuB,kBAExBA,GAFwB,2CAAH,qD","sources":["components/MoviesItems/MoviesItems.jsx","pages/Movies.jsx","services/movies-api.js"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\nimport { ROUTES } from 'utils/routes';\nconst BASE_URL = 'http://image.tmdb.org/t/p/w500/';\nconst defaultImg =\n  'https://yt3.googleusercontent.com/pL_VB56ZIus1L_ORk679enHohInq0pjCweZ4vgqS5yM4KB0mAp8DEznP94MdSIQpSM3-5uE_lQ=s900-c-k-c0x00ffffff-no-rj';\n\nconst MoviesItems = ({ movies, location }) => {\n  const locationItem = useLocation();\n  const to = location.pathname;\n\n  return (\n    <>\n      <ul className=\"mb-5 flex flex-wrap\">\n        {movies.map(({ id, poster_path, title }) => (\n          <Link\n            key={id}\n            to={to !== ROUTES.HOME ? `${id}` : `${ROUTES.MOVIES}/${id}`}\n            state={{ from: locationItem }}\n            className=\"hover:text-stone-400  border border-black text-center ml-10 mb-5 rounded\"\n          >\n            <li>\n              <img\n                src={poster_path ? BASE_URL + poster_path : defaultImg}\n                alt={title}\n                width=\"200\"\n              />\n              <p className=\"ml-5 mt-1 w-40 h-24\">{title}</p>\n            </li>\n          </Link>\n        ))}\n      </ul>\n    </>\n  );\n};\nexport default MoviesItems;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams, useLocation } from 'react-router-dom';\nimport { toast } from 'react-hot-toast';\nimport { FcSearch } from 'react-icons/fc';\nimport { fetchSearchMovie } from 'services/movies-api';\nimport MoviesItems from 'components/MoviesItems/MoviesItems';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query' ?? '');\n  const location = useLocation();\n\n  useEffect(() => {\n    if (!query) return;\n\n    (async () => {\n      try {\n        const { results } = await fetchSearchMovie(query);\n        if (!results.length) {\n          toast.error('There are no movies for your request.');\n          return;\n        }\n        setMovies(results);\n      } catch (error) {\n        toast.error(\n          `${error.message}. Movies loading failed, please try again`\n        );\n      }\n    })();\n  }, [query]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (e.target.elements.text.value === '') {\n      toast.error('Please enter a movie name');\n      return;\n    }\n    const el = e.currentTarget;\n    setSearchParams({\n      query: el.elements.text.value.trim(),\n    });\n    el.reset();\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit} className=\"flex justify-center\">\n        <input\n          type=\"text\"\n          placeholder=\" Search movies\"\n          autoComplete=\"off\"\n          name=\"text\"\n          className=\"border border-blue-300 pt-1 pb-1 pr-4 pl-1 rounded mb-5 outline-none\"\n        />\n        <button\n          type=\"submit\"\n          className=\"bg-blue-300 p-1 ml-2 text-white hover:text-stone-200 rounded h-8 w-12 flex justify-center items-center mt-0.5\"\n        >\n          <FcSearch />\n        </button>\n      </form>\n      {movies && <MoviesItems movies={movies} location={location} />}\n    </>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: '11546a486a09144867cb90a93b48d542',\n};\n\nexport const fetchTrendingMovie = async () => {\n  const { data } = await axios.get('/trending/movie/day');\n  return data;\n};\n\nexport const fetchSearchMovie = async query => {\n  const { data } = await axios.get(`/search/movie?&query=${query}`);\n  return data;\n};\n\nexport const fetchDetailsMovie = async movieId => {\n  const { data } = await axios.get(`/movie/${movieId}?`);\n  return data;\n};\n\nexport const fetchCastMovie = async movieId => {\n  const { data } = await axios.get(`/movie/${movieId}/credits?`);\n  return data;\n};\n\nexport const fetchReviewsMovie = async movieId => {\n  const { data } = await axios.get(`/movie/${movieId}/reviews?`);\n  return data;\n};\n"],"names":["movies","location","locationItem","useLocation","to","pathname","className","map","id","poster_path","title","ROUTES","state","from","src","alt","width","useState","setMovies","useSearchParams","searchParams","setSearchParams","query","get","useEffect","fetchSearchMovie","results","length","toast","message","onSubmit","e","preventDefault","target","elements","text","value","el","currentTarget","trim","reset","type","placeholder","autoComplete","name","axios","api_key","fetchTrendingMovie","data","fetchDetailsMovie","movieId","fetchCastMovie","fetchReviewsMovie"],"sourceRoot":""}